{"ast":null,"code":"import _defineProperty from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\actions\\\\st_frontend\\\\src\\\\pages\\\\Inventory\\\\Productnew\\\\SerialForm.js\";\nimport Model from '../../../model/model';\nimport moment from 'moment';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ButtonGroup } from 'reactstrap';\nimport ViewModal from '../../../components/ViewModal';\nimport { BenGrid } from '../../../components/BenGrid2';\nimport SelectList from '../../../components/SelectList';\nvar MODE = 'serials';\n\nvar SerialForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SerialForm, _React$Component);\n\n  function SerialForm(props) {\n    var _this;\n\n    _classCallCheck(this, SerialForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SerialForm).call(this, props));\n\n    _this._onChangeType = function (e) {\n      var status = e.target.value;\n\n      if (status !== '') {\n        _this.model.set('paginate', {\n          status: status\n        });\n      } else {\n        _this.model.remove('status');\n      }\n\n      _this.model.load();\n    };\n\n    _this.state = {\n      curCode: '',\n      status: ''\n    };\n    _this.grid = {\n      colums: [{\n        headerName: \"Serial/Emei\",\n        field: \"code\",\n        width: 180,\n        cellRenderer: function cellRenderer(params) {\n          return \"\\n                        <span class=\\\"text-uppercase\\\"> \".concat(params.value, \" </span>\\n                    \");\n        }\n      }, {\n        headerName: \"Sản phẩm\",\n        field: \"product_code\",\n        width: 200,\n        cellRenderer: function cellRenderer(params) {\n          return \"<span class=\\\"text-uppercase\\\"> \".concat(params.value, \" </span>\");\n        }\n      }, {\n        headerName: \"Trạng thái\",\n        field: \"status\",\n        width: 180,\n        cellRenderer: function cellRenderer(params) {\n          var bgArr = [{\n            class: 'text-green',\n            name: '<i class=\"fa fa-clock-o mr-5\"></i> còn hàng'\n          }, {\n            class: 'text-blue',\n            name: '<i class=\"fa fa-truck mr-5\"></i> đã bán'\n          }];\n          return \"\\n                        <span class=\\\"\".concat(bgArr[params.value]['class'], \"\\\"> \").concat(bgArr[params.value]['name'], \" <span>\\n                    \");\n        }\n      }, {\n        headerName: \"Ngày Nhập\",\n        field: \"date_created\",\n        width: 140,\n        cellRenderer: function cellRenderer(params) {\n          return moment(params.value).format('YYYY-MM-DD');\n        }\n      }, {\n        headerName: \"Ngày bán\",\n        field: \"date_modified\",\n        width: 140,\n        cellRenderer: function cellRenderer(params) {\n          return params.value === null ? '' : moment(params.value).format('YYYY-MM-DD');\n        }\n      }, {\n        headerName: \"Chứng từ\",\n        field: \"warehouse_receipt_code_in\",\n        width: 200,\n        cellRenderer: function cellRenderer(params) {\n          var code = params.data.status === 0 ? params.value : params.data.warehouse_receipt_code_out;\n          return \" <span class=\\\"text-uppercase\\\"> \".concat(code, \" </span> \");\n        }\n      }],\n      rowData: []\n    };\n\n    _this._setup();\n\n    return _this;\n  }\n\n  _createClass(SerialForm, [{\n    key: \"_setup\",\n    value: function _setup() {\n      this.model = new Model(MODE, this.props.dispatch);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProp) {\n      if (newProp.isOpen) {\n        if (this.state.curCode !== newProp.data.code) {\n          this.model.set('paginate', {\n            product_code: newProp.data.code\n          });\n          this.state.curCode = newProp.data.code;\n          this.model.load();\n        }\n\n        this.grid.rowData = newProp[MODE]['list'] || [];\n        this.setState(Object.assign(this.state, newProp[MODE]['state']));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ViewModal, Object.assign({\n        width: \"68%\",\n        name: React.createElement(\"span\", {\n          className: \"text-uppercase\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \" \", this.props.data.code, \" \")\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"view-modal-body\",\n        style: {\n          marginBottom: 40,\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(BenGrid, {\n        gridID: \"id\",\n        rowSelection: \"single\",\n        isRightTool: true,\n        height: \"60vh\",\n        nextColums: this.grid.colums,\n        rowData: this.grid.rowData,\n        model: this.model,\n        customButton: React.createElement(ButtonGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(SelectList, {\n          onChange: this._onChangeType,\n          style: {\n            borderRadius: 0,\n            borderRight: 0\n          },\n          name: \"T\\u1EA5t c\\u1EA3\",\n          rows: [{\n            code: 0,\n            name: 'Còn hàng'\n          }, {\n            code: 1,\n            name: 'Đã bán'\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        })),\n        displayBtn: [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SerialForm;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _defineProperty({}, MODE, state[MODE]);\n};\n\nexport default connect(mapStateToProps)(SerialForm);","map":{"version":3,"sources":["D:/actions/st_frontend/src/pages/Inventory/Productnew/SerialForm.js"],"names":["Model","moment","React","connect","ButtonGroup","ViewModal","BenGrid","SelectList","MODE","SerialForm","props","_onChangeType","e","status","target","value","model","set","remove","load","state","curCode","grid","colums","headerName","field","width","cellRenderer","params","bgArr","class","name","format","code","data","warehouse_receipt_code_out","rowData","_setup","dispatch","newProp","isOpen","product_code","setState","Object","assign","marginBottom","marginTop","borderRadius","borderRight","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import Model from '../../../model/model';\r\nimport moment from 'moment'; \r\n\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nimport { ButtonGroup } from 'reactstrap' ; \r\n\r\nimport ViewModal from '../../../components/ViewModal';\r\nimport { BenGrid } from '../../../components/BenGrid2';\r\n\r\nimport SelectList from '../../../components/SelectList';\r\n\r\n\r\nconst MODE = 'serials';\r\n\r\n\r\n\r\n\r\nclass SerialForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n\r\n            curCode:'',\r\n            status:''\r\n        }\r\n\r\n        this.grid = {\r\n            colums:[\r\n              { headerName: \"Serial/Emei\", field: \"code\", width:180,\r\n                cellRenderer(params){\r\n                    return `\r\n                        <span class=\"text-uppercase\"> ${params.value} </span>\r\n                    `;\r\n                }\r\n              },\r\n              { headerName: \"Sản phẩm\", field: \"product_code\", width:200,  \r\n                cellRenderer(params){\r\n                    return `<span class=\"text-uppercase\"> ${params.value} </span>`\r\n                }\r\n              },\r\n\r\n              { headerName: \"Trạng thái\", field:\"status\",width:180, \r\n                cellRenderer(params){\r\n\r\n                    const bgArr = [\r\n                        {\r\n                            class:'text-green',\r\n                            name:'<i class=\"fa fa-clock-o mr-5\"></i> còn hàng'\r\n                        },\r\n                        {\r\n                            class:'text-blue',\r\n                            name:'<i class=\"fa fa-truck mr-5\"></i> đã bán'\r\n                        },\r\n                        \r\n                    ] ; \r\n\r\n                    return `\r\n                        <span class=\"${bgArr[params.value]['class']}\"> ${   bgArr[params.value]['name']} <span>\r\n                    `\r\n                }\r\n              },\r\n\r\n              { headerName: \"Ngày Nhập\", field: \"date_created\", width:140,\r\n                cellRenderer(params){\r\n                    return  moment(params.value).format('YYYY-MM-DD');\r\n\r\n                }\r\n              },\r\n\r\n              { headerName: \"Ngày bán\", field: \"date_modified\", width:140,\r\n                cellRenderer(params){\r\n                    return  params.value === null ? '' : moment(params.value).format('YYYY-MM-DD')\r\n\r\n                }\r\n              },\r\n              {\r\n                  headerName:\"Chứng từ\", field:\"warehouse_receipt_code_in\",width:200,\r\n                  cellRenderer(params){\r\n                    const code = params.data.status === 0 ? params.value : params.data.warehouse_receipt_code_out\r\n                      return ` <span class=\"text-uppercase\"> ${code} </span> `\r\n                  }\r\n              }\r\n              \r\n              \r\n            ],\r\n            rowData:[]\r\n          }\r\n\r\n        this._setup();\r\n        \r\n        \r\n\r\n    }\r\n\r\n    _setup(){\r\n        this.model = new Model(MODE,this.props.dispatch);\r\n    }   \r\n\r\n    componentWillReceiveProps(newProp){\r\n        if(newProp.isOpen){\r\n\r\n            \r\n            if(this.state.curCode !== newProp.data.code){\r\n                \r\n                this.model.set('paginate',{\r\n                    product_code: newProp.data.code\r\n                });\r\n                this.state.curCode = newProp.data.code;\r\n                \r\n                this.model.load();\r\n            }\r\n\r\n            this.grid.rowData = newProp[MODE]['list'] || [];\r\n            this.setState(Object.assign(this.state,newProp[MODE]['state']));\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    _onChangeType = (e)=>{\r\n        const status = e.target.value;\r\n\r\n        if(status!==''){\r\n            this.model.set('paginate',{\r\n                status:status\r\n            });\r\n        }else{\r\n            this.model.remove('status');\r\n        }\r\n\r\n        this.model.load();\r\n\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <ViewModal\r\n                width=\"68%\"  \r\n                name={ <span className=\"text-uppercase\"> { this.props.data.code } </span> } {...this.props} >\r\n                \r\n                <div className=\"view-modal-body\" style={{marginBottom:40, marginTop:10}}>\r\n                    \r\n                    <BenGrid\r\n\r\n                        \r\n                        gridID='id'\r\n                        rowSelection='single'\r\n\r\n                        isRightTool={ true }\r\n                        height=\"60vh\"\r\n\r\n                        nextColums={ this.grid.colums }\r\n                        rowData={this.grid.rowData}\r\n                        model={ this.model }\r\n                        \r\n                        customButton = {\r\n\r\n                            <ButtonGroup>\r\n\r\n                                <SelectList\r\n\r\n                                    onChange={ this._onChangeType }\r\n\r\n                                    style={{borderRadius:0,borderRight:0}}\r\n                                    name='Tất cả'\r\n                                    rows={[\r\n                                        {code:0, name:'Còn hàng'},\r\n                                        {code:1, name:'Đã bán'},\r\n\r\n                                    ]}\r\n                                />\r\n                            </ButtonGroup>\r\n                            \r\n                        }\r\n\r\n                        displayBtn = {[]}\r\n\r\n                        \r\n                        \r\n                    />\r\n\r\n                </div>\r\n\r\n            </ViewModal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        [MODE]: state[MODE]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SerialForm);\r\n"]},"metadata":{},"sourceType":"module"}