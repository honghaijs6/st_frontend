{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\actions\\\\st_frontend\\\\src\\\\components\\\\ButtonExportXLS.js\";\n// HOOKS \nimport doLoadAll from '../hook/ultil/doLoadAll';\nimport { preLoad } from '../hook/before'; // LIBS \n\nimport XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\n\nvar ButtonExportXLS =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ButtonExportXLS, _Component);\n\n  function ButtonExportXLS() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ButtonExportXLS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ButtonExportXLS)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      rows: []\n    };\n\n    _this._onSubmit = function () {\n      _this._loadAllData();\n    };\n\n    return _this;\n  }\n\n  _createClass(ButtonExportXLS, [{\n    key: \"_loadAllData\",\n    value: function () {\n      var _loadAllData2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res, data, wb, ws, wbout, s2ab;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                s2ab = function _ref(s) {\n                  var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer\n\n                  var view = new Uint8Array(buf); //create uint8array as viewer\n\n                  for (var i = 0; i < s.length; i++) {\n                    view[i] = s.charCodeAt(i) & 0xFF;\n                  } //convert to octet\n\n\n                  return buf;\n                };\n\n                preLoad('get');\n                _context.next = 4;\n                return doLoadAll(this.props.strModel);\n\n              case 4:\n                res = _context.sent;\n                data = res.rows;\n                wb = new XLSX.utils.book_new();\n                wb.props = {\n                  Title: this.props.strModel,\n                  Subject: this.props.strModel,\n                  Author: \"Hong Hai\",\n                  CreateDate: new Date()\n                };\n                wb.SheetNames.push('Sheet1');\n                ws = XLSX.utils.json_to_sheet(data);\n                wb.Sheets[\"Sheet1\"] = ws;\n                wbout = XLSX.write(wb, {\n                  bookType: 'xlsx',\n                  type: 'binary'\n                });\n                saveAs(new Blob([s2ab(wbout)], {\n                  type: \"application/octet-stream\"\n                }), this.props.strModel + '.xlsx');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _loadAllData() {\n        return _loadAllData2.apply(this, arguments);\n      }\n\n      return _loadAllData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Button, {\n        style: this.props.style,\n        onClick: this._onSubmit,\n        className: \"btn btn-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: this.props.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \" \", this.props.title);\n    }\n  }]);\n\n  return ButtonExportXLS;\n}(Component);\n\nButtonExportXLS.defaultProps = {\n  strModel: 'products',\n  columns: ['code', 'name', 'type', 'supplier_codes', 'price_1', 'price_2', 'price_3', 'price_4', 'is_serial'],\n  icon: \"fa fa-cloud-download mr-5\",\n  title: '.xlsx'\n};\nexport default ButtonExportXLS;","map":{"version":3,"sources":["D:/actions/st_frontend/src/components/ButtonExportXLS.js"],"names":["doLoadAll","preLoad","XLSX","saveAs","React","Component","Button","ButtonExportXLS","state","rows","_onSubmit","_loadAllData","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","props","strModel","res","data","wb","utils","book_new","Title","Subject","Author","CreateDate","Date","SheetNames","push","ws","json_to_sheet","Sheets","wbout","write","bookType","type","Blob","style","icon","title","defaultProps","columns"],"mappings":"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","sourcesContent":["\r\n// HOOKS \r\nimport doLoadAll from '../hook/ultil/doLoadAll'; \r\nimport { preLoad } from '../hook/before';\r\n\r\n\r\n// LIBS \r\nimport XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nclass ButtonExportXLS extends Component {\r\n\r\n    state = {\r\n        rows:[]\r\n    }\r\n\r\n\r\n    \r\n    async _loadAllData(){\r\n\r\n        preLoad('get');\r\n\r\n        const res =  await doLoadAll(this.props.strModel);\r\n        const data = res.rows; \r\n\r\n        const wb = new XLSX.utils.book_new();\r\n        wb.props = {\r\n            Title:this.props.strModel,\r\n            Subject:this.props.strModel,\r\n            Author:\"Hong Hai\",\r\n            CreateDate: new Date()\r\n        }\r\n\r\n        wb.SheetNames.push('Sheet1');\r\n        var ws = XLSX.utils.json_to_sheet(data);\r\n        \r\n\r\n        wb.Sheets[\"Sheet1\"] = ws;\r\n        var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\r\n\r\n        function s2ab(s) { \r\n            var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer\r\n            var view = new Uint8Array(buf);  //create uint8array as viewer\r\n            for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet\r\n            return buf;    \r\n        }\r\n\r\n\r\n        saveAs(new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}), this.props.strModel+'.xlsx');\r\n        \r\n\r\n\r\n    }\r\n    _onSubmit = ()=>{\r\n        this._loadAllData();\r\n\r\n    }\r\n    render() {\r\n        return ( \r\n            <Button style={this.props.style} onClick={this._onSubmit } className=\"btn btn-normal\">\r\n                <i className={this.props.icon}></i> { this.props.title }\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nButtonExportXLS.defaultProps = {\r\n    strModel:'products',\r\n    columns:['code','name','type','supplier_codes','price_1','price_2','price_3','price_4','is_serial'],\r\n    \r\n    icon:\"fa fa-cloud-download mr-5\",\r\n    title:'.xlsx'\r\n}\r\n\r\nexport default ButtonExportXLS;"]},"metadata":{},"sourceType":"module"}