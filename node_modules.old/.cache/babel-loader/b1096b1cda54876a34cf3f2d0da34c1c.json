{"ast":null,"code":"export var N2T = function N2T() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  n = parseInt(n);\n  var string = n.toString(),\n      units,\n      tens,\n      scales,\n      start,\n      end,\n      chunks,\n      chunksLen,\n      chunk,\n      ints,\n      i,\n      word,\n      words;\n  var and = ' linh ';\n  /* Is number zero? */\n\n  if (parseInt(string) === 0) {\n    return 'không';\n  }\n  /* Array of units as words */\n\n\n  units = ['', 'một', 'hai', 'ba', 'bốn', 'năm', 'sáu', 'bảy', 'tám', 'chín', 'mười', 'mười một', 'mười hai', 'mười ba', 'mười bốn', 'mười lăm', 'mười sáu', 'mười bảy', 'mười tám', 'mười chín'];\n  /* Array of tens as words */\n\n  tens = ['', '', 'hai mươi', 'ba mươi', 'bốn mươi', 'năm mươi', 'sáu mươi', 'bảy mươi', 'tám mươi', 'chín mươi'];\n  /* Array of scales as words */\n\n  scales = ['', 'nghìn', 'triệu', 'tỷ', 'nghìn tỷ', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quatttuor-decillion', 'quindecillion', 'sexdecillion', 'septen-decillion', 'octodecillion', 'novemdecillion', 'vigintillion', 'centillion'];\n  /* Split user arguemnt into 3 digit chunks from right to left */\n\n  start = string.length;\n  chunks = [];\n\n  while (start > 0) {\n    end = start;\n    chunks.push(string.slice(start = Math.max(0, start - 3), end));\n  }\n  /* Check if function has enough scale words to be able to stringify the user argument */\n\n\n  chunksLen = chunks.length;\n\n  if (chunksLen > scales.length) {\n    return '';\n  }\n  /* Stringify each integer in each chunk */\n\n\n  words = [];\n\n  for (i = 0; i < chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split('').reverse().map(parseFloat);\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n      /* Add scale word if chunk is not zero and array item exists */\n\n\n      if (word = scales[i]) {\n        words.push(word);\n      }\n      /* Add unit word if array item exists */\n\n\n      if (word = units[ints[0]]) {\n        words.push(word);\n      }\n      /* Add tens word if array item exists */\n\n\n      if (word = tens[ints[1]]) {\n        words.push(word);\n      }\n      /* Add 'and' string after units or tens integer if: */\n\n\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || !i && chunksLen) {\n          if (ints[1] === 0) {\n            words.push(and);\n          }\n        }\n      }\n      /* Add hundreds word if array item exists */\n\n\n      if (word = units[ints[2]]) {\n        words.push(word + ' trăm');\n      }\n    }\n  }\n\n  return words.reverse().join(' ');\n};\nexport var test = function test() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var string = n.toString(),\n      units,\n      tens,\n      scales,\n      start,\n      end,\n      chunks,\n      chunksLen,\n      chunk,\n      ints,\n      i,\n      word,\n      words;\n  var and = 'and ';\n  /* Is number zero? */\n\n  if (parseInt(string) === 0) {\n    return 'zero';\n  }\n  /* Array of units as words */\n\n\n  units = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n  /* Array of tens as words */\n\n  tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n  /* Array of scales as words */\n\n  scales = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quatttuor-decillion', 'quindecillion', 'sexdecillion', 'septen-decillion', 'octodecillion', 'novemdecillion', 'vigintillion', 'centillion'];\n  /* Split user arguemnt into 3 digit chunks from right to left */\n\n  start = string.length;\n  chunks = [];\n\n  while (start > 0) {\n    end = start;\n    chunks.push(string.slice(start = Math.max(0, start - 3), end));\n  }\n  /* Check if function has enough scale words to be able to stringify the user argument */\n\n\n  chunksLen = chunks.length;\n\n  if (chunksLen > scales.length) {\n    return '';\n  }\n  /* Stringify each integer in each chunk */\n\n\n  words = [];\n\n  for (i = 0; i < chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split('').reverse().map(parseFloat);\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n      /* Add scale word if chunk is not zero and array item exists */\n\n\n      if (word = scales[i]) {\n        words.push(word);\n      }\n      /* Add unit word if array item exists */\n\n\n      if (word = units[ints[0]]) {\n        words.push(word);\n      }\n      /* Add tens word if array item exists */\n\n\n      if (word = tens[ints[1]]) {\n        words.push(word);\n      }\n      /* Add 'and' string after units or tens integer if: */\n\n\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || !i && chunksLen) {\n          words.push(and);\n        }\n      }\n      /* Add hundreds word if array item exists */\n\n\n      if (word = units[ints[2]]) {\n        words.push(word + ' hundred');\n      }\n    }\n  }\n\n  return words.reverse().join(' ');\n};","map":{"version":3,"sources":["D:/actions/st_frontend/src/hook/ultil/N2T.js"],"names":["N2T","n","parseInt","string","toString","units","tens","scales","start","end","chunks","chunksLen","chunk","ints","i","word","words","and","length","push","slice","Math","max","split","reverse","map","parseFloat","join","test"],"mappings":"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","sourcesContent":["\r\nexport const N2T = (n='')=>{\r\n    \r\n    n = parseInt(n);\r\n\r\n    var string = n.toString(),\r\n        units, tens, scales, start, end, chunks, chunksLen, chunk, ints, i, word, words;\r\n\r\n    var and = ' linh '\r\n\r\n    /* Is number zero? */\r\n    if (parseInt(string) === 0) {\r\n        return 'không';\r\n    }\r\n\r\n    /* Array of units as words */\r\n    units = ['', 'một', 'hai', 'ba', 'bốn', 'năm', 'sáu', 'bảy', 'tám', 'chín', 'mười', 'mười một', 'mười hai', 'mười ba', 'mười bốn', 'mười lăm', 'mười sáu', 'mười bảy', 'mười tám', 'mười chín'];\r\n\r\n    /* Array of tens as words */\r\n    tens = ['', '', 'hai mươi', 'ba mươi', 'bốn mươi', 'năm mươi', 'sáu mươi', 'bảy mươi', 'tám mươi', 'chín mươi'];\r\n\r\n    /* Array of scales as words */\r\n    scales = ['', 'nghìn', 'triệu', 'tỷ', 'nghìn tỷ', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quatttuor-decillion', 'quindecillion', 'sexdecillion', 'septen-decillion', 'octodecillion', 'novemdecillion', 'vigintillion', 'centillion'];\r\n\r\n    /* Split user arguemnt into 3 digit chunks from right to left */\r\n    start = string.length;\r\n    chunks = [];\r\n    while (start > 0) {\r\n        end = start;\r\n        chunks.push(string.slice((start = Math.max(0, start - 3)), end));\r\n    }\r\n\r\n    /* Check if function has enough scale words to be able to stringify the user argument */\r\n    chunksLen = chunks.length;\r\n    if (chunksLen > scales.length) {\r\n        return '';\r\n    }\r\n\r\n    /* Stringify each integer in each chunk */\r\n    words = [];\r\n    for (i = 0; i < chunksLen; i++) {\r\n\r\n        chunk = parseInt(chunks[i]);\r\n\r\n        if (chunk) {\r\n\r\n            /* Split chunk into array of individual integers */\r\n            ints = chunks[i].split('').reverse().map(parseFloat);\r\n\r\n            /* If tens integer is 1, i.e. 10, then add 10 to units integer */\r\n            if (ints[1] === 1) {\r\n                ints[0] += 10;\r\n            }\r\n\r\n            /* Add scale word if chunk is not zero and array item exists */\r\n            if ((word = scales[i])) {\r\n                words.push(word);\r\n            }\r\n\r\n            /* Add unit word if array item exists */\r\n            if ((word = units[ints[0]])) {\r\n                words.push(word);\r\n            }\r\n\r\n            /* Add tens word if array item exists */\r\n            if ((word = tens[ints[1]])) {\r\n                \r\n                words.push(word);\r\n            }\r\n\r\n            /* Add 'and' string after units or tens integer if: */\r\n            if (ints[0] || ints[1]) {\r\n\r\n                /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\r\n                if (ints[2] || !i && chunksLen) {\r\n\r\n                    \r\n                    if(ints[1]===0){\r\n                        words.push(and);\r\n                    }\r\n\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            /* Add hundreds word if array item exists */\r\n            if ((word = units[ints[2]])) {\r\n                words.push(word + ' trăm');\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return words.reverse().join(' ');\r\n    \r\n\r\n}\r\n\r\n\r\nexport const test = (n='')=>{\r\n    var string = n.toString(),\r\n        units, tens, scales, start, end, chunks, chunksLen, chunk, ints, i, word, words;\r\n\r\n    var and = 'and '\r\n\r\n    /* Is number zero? */\r\n    if (parseInt(string) === 0) {\r\n        return 'zero';\r\n    }\r\n\r\n    /* Array of units as words */\r\n    units = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\r\n\r\n    /* Array of tens as words */\r\n    tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\r\n\r\n    /* Array of scales as words */\r\n    scales = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quatttuor-decillion', 'quindecillion', 'sexdecillion', 'septen-decillion', 'octodecillion', 'novemdecillion', 'vigintillion', 'centillion'];\r\n\r\n    /* Split user arguemnt into 3 digit chunks from right to left */\r\n    start = string.length;\r\n    chunks = [];\r\n    while (start > 0) {\r\n        end = start;\r\n        chunks.push(string.slice((start = Math.max(0, start - 3)), end));\r\n    }\r\n\r\n    /* Check if function has enough scale words to be able to stringify the user argument */\r\n    chunksLen = chunks.length;\r\n    if (chunksLen > scales.length) {\r\n        return '';\r\n    }\r\n\r\n    /* Stringify each integer in each chunk */\r\n    words = [];\r\n    for (i = 0; i < chunksLen; i++) {\r\n\r\n        chunk = parseInt(chunks[i]);\r\n\r\n        if (chunk) {\r\n\r\n            /* Split chunk into array of individual integers */\r\n            ints = chunks[i].split('').reverse().map(parseFloat);\r\n\r\n            /* If tens integer is 1, i.e. 10, then add 10 to units integer */\r\n            if (ints[1] === 1) {\r\n                ints[0] += 10;\r\n            }\r\n\r\n            /* Add scale word if chunk is not zero and array item exists */\r\n            if ((word = scales[i])) {\r\n                words.push(word);\r\n            }\r\n\r\n            /* Add unit word if array item exists */\r\n            if ((word = units[ints[0]])) {\r\n                words.push(word);\r\n            }\r\n\r\n            /* Add tens word if array item exists */\r\n            if ((word = tens[ints[1]])) {\r\n                words.push(word);\r\n            }\r\n\r\n            /* Add 'and' string after units or tens integer if: */\r\n            if (ints[0] || ints[1]) {\r\n\r\n                /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\r\n                if (ints[2] || !i && chunksLen) {\r\n                    words.push(and);\r\n                }\r\n\r\n            }\r\n\r\n            /* Add hundreds word if array item exists */\r\n            if ((word = units[ints[2]])) {\r\n                words.push(word + ' hundred');\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return words.reverse().join(' ');\r\n}"]},"metadata":{},"sourceType":"module"}