{"ast":null,"code":"import _classCallCheck from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\actions\\\\st_frontend\\\\src\\\\pages\\\\Order\\\\_S\\\\PrintForm.js\";\nimport { N2T } from '../../../hook/ultil/N2T';\nimport doPrint from '../../../hook/ultil/doPrint';\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport ViewModal from '../../../components/ViewModal';\n\nvar PrintForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PrintForm, _Component);\n\n  function PrintForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PrintForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PrintForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      companyInfo: {}\n    };\n    return _this;\n  }\n\n  _createClass(PrintForm, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProp) {\n      if (JSON.stringify(newProp.companyInfo) != '{}') {\n        this.setState(newProp.companyInfo);\n      }\n    }\n  }, {\n    key: \"_renderBodyOrder\",\n    value: function _renderBodyOrder(cart) {\n      var html = \"\";\n      cart.map(function (item, index) {\n        var total = parseFloat(item.price) * parseInt(item.amount);\n        var stt = index + 1;\n        html += \"\\n                <tr class=\\\"record-item\\\">\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \".concat(stt, \"\\n                    </td>\\n                    \\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\" >\\n                        \").concat(item.code, \"\\n                    </td>\\n                    <td class=\\\"item-pro-desc item\\\" style=\\\"word-wrap:break-word;\\\">\\n                       \").concat(item.name, \"\\n                    </td>\\n\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(item.unit || '', \"\\n                    </td>\\n\\n                    \\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(item.amount, \"\\n                    </td>\\n                    <td class=\\\"text-center item\\\"  style=\\\"vertical-align:middle\\\">\\n                        \").concat(numeral(item.price).format('0,0'), \"\\n                    </td>\\n\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(numeral(total).format('0,0'), \"\\n                    </td>\\n                </tr>\\n            \");\n      });\n      return html;\n    }\n  }, {\n    key: \"_renderBodyQuotation\",\n    value: function _renderBodyQuotation(cart) {\n      var html = \"\";\n      cart.map(function (item, index) {\n        var total = parseFloat(item.price) * parseInt(item.amount);\n        var stt = index + 1;\n        html += \"\\n                <tr class=\\\"record-item\\\">\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \".concat(stt, \"\\n                    </td>\\n                    \\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\" >\\n                        \").concat(item.name, \"\\n                    </td>\\n                    <td class=\\\"item-pro-desc item\\\" style=\\\"word-wrap:break-word;\\\">\\n                       \").concat(item.content || '', \"\\n                    </td>\\n\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(item.unit || '', \"\\n                    </td>\\n\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(item.images === null ? '' : React.createElement(\"img\", {\n          style: {\n            maxHeight: 72\n          },\n          className: \"img-responsive\",\n          src: item.images,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), \"\\n                    </td>\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(item.amount, \"\\n                    </td>\\n                    <td class=\\\"text-center item\\\"  style=\\\"vertical-align:middle\\\">\\n                        \").concat(numeral(item.price).format('0,0'), \"\\n                    </td>\\n\\n                    <td class=\\\"text-center item\\\" style=\\\"vertical-align:middle\\\">\\n                        \").concat(numeral(total).format('0,0'), \"\\n                    </td>\\n                </tr>\\n            \");\n      });\n      return html;\n    }\n  }, {\n    key: \"_formatHTML\",\n    value: function _formatHTML(data, companyInfo, type) {\n      var HTML = \"\";\n\n      if (JSON.stringify(companyInfo) != '{}') {\n        type = type === '' ? 'quotation_temp' : type;\n        HTML = companyInfo[type];\n        HTML = HTML.replace(/{{COMPANY_LOGO}}/g, companyInfo['logo']);\n        HTML = HTML.replace(/{{COMPANY_NAME}}/g, companyInfo['name']);\n        HTML = HTML.replace(/{{COMPANY_ADDRESS}}/g, companyInfo['address']);\n        HTML = HTML.replace(/{{COMPANY_TAXNO}}/g, companyInfo['tax_no']);\n        HTML = HTML.replace(/{{COMPANY_PHONE}}/g, companyInfo['phone']);\n        HTML = HTML.replace(/{{COMPANY_WEBSITE}}/g, companyInfo['website']);\n        HTML = HTML.replace(/{{COMPANY_EMAIL}}/g, companyInfo['email']); // DECODE DATA\n\n        if (JSON.stringify(data) !== '{}') {\n          var cusInfo = JSON.parse(data.customer_info); // PARSE CODE CUSTOMER\n\n          HTML = HTML.replace(/{{CUSTOMER_NAME}}/g, cusInfo.name);\n          HTML = HTML.replace(/{{CUSTOMER_ADDRESS}}/g, cusInfo.address_delivery);\n          HTML = HTML.replace(/{{CUSTOMER_PHONE}}/g, cusInfo.phone);\n          HTML = HTML.replace(/{{CUSTOMER_EMAIL}}/g, cusInfo.email);\n          HTML = HTML.replace(/{{CUSTOMER_RECEIVER}}/g, cusInfo.contact_name);\n          HTML = HTML.replace(/{{CUSTOMER_TAXNO}}/g, cusInfo.tax_no); // END PARSE CODE CUSTOMER  \n\n          var orderInfo = data; // ORDER INFO \n\n          HTML = HTML.replace(/{{ORDER_CODE_PI}}/g, orderInfo.code_pi);\n          HTML = HTML.replace(/{{ORDER_CODE}}/g, orderInfo.code);\n          HTML = HTML.replace(/{{ORDER_CODE_CREATED}}/g, moment(orderInfo.date_created).format('YYYY-MM-DD'));\n          HTML = HTML.replace(/{{ORDER_DATE_CONFIRMED}}/g, moment(orderInfo.date_confirmed).format('YYYY-MM-DD'));\n          HTML = HTML.replace(/{{ORDER_BELONG}}/g, orderInfo.belong_user);\n          HTML = HTML.replace(/{{ORDER_PAYMENT_CODE}}/g, orderInfo.payment_code);\n          HTML = HTML.replace(/{{BARCODE}}/g, \"<img style=\\\"height:72px\\\" src=\\\"https://barcode.tec-it.com/barcode.ashx?data=\".concat(type === 'quotation_temp' ? orderInfo.code.toUpperCase() : orderInfo.code_pi.toUpperCase(), \"\\\"/>\")); // END ORDER INFO \n          // CART TABLE\n\n          var cart = JSON.parse(orderInfo.cart);\n          var TOTAL_VAT = parseFloat(orderInfo['total_sum']) * (parseInt(orderInfo['vat']) / 100);\n          HTML = HTML.replace(/{{ORDER_RECORDS}}/g, type === 'quotation_temp' ? this._renderBodyQuotation(cart) : this._renderBodyOrder(cart));\n          HTML = HTML.replace(/{{ORDER_DISCOUNT}}/g, numeral(orderInfo.level_discount).format('0,0'));\n          HTML = HTML.replace(/{{ORDER_AMOUNT}}/g, numeral(orderInfo.total_sum).format('0,0'));\n          HTML = HTML.replace(/{{VAT}}/g, orderInfo.vat);\n          HTML = HTML.replace(/{{ORDER_AMOUNT}}/g, numeral(orderInfo.total_sum_vat).format('0,0'));\n          HTML = HTML.replace(/{{ORDER_AMOUNT_TAX}}/g, numeral(TOTAL_VAT).format('0,0'));\n          HTML = HTML.replace(/{{ORDER_SUM}}/g, numeral(orderInfo['total_sum_vat']).format('0,0') + ' đ');\n          HTML = HTML.replace(/{{ORDER_SUM_TEXT}}/g, N2T(orderInfo['total_sum_vat']) + ' đồng'); // END CART TABLE\n          // FOOTER INFO \n\n          HTML = HTML.replace(/{{ORDER_PAYMENT_DESC}}/g, orderInfo['payment_desc']);\n          HTML = HTML.replace(/{{ORDER_PREPARE}}/g, window.USERINFO.username); // END FOOTER INFO\n        }\n      }\n\n      return HTML;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.props.data;\n\n      var HTML = this._formatHTML(data, this.props.companyInfo, this.props.type); //this._formatQuotationHTML(data,this.props.companyInfo);\n\n\n      return React.createElement(ViewModal, Object.assign({\n        name: React.createElement(\"span\", {\n          className: \"text-uppercase\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \" \", data.code, \" \")\n      }, this.props, {\n        onToggle: function onToggle(isOpen) {\n          _this2.props.onToggle(isOpen);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          padding: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        onClick: function onClick() {\n          doPrint(HTML);\n        },\n        className: \"btn btn-normal btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \" \", React.createElement(\"i\", {\n        className: \"fa fa-print\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this2.componentRef = el;\n        },\n        style: {\n          paddingBottom: 20\n        },\n        dangerouslySetInnerHTML: {\n          __html: HTML\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PrintForm;\n}(Component);\n\nPrintForm.defaultProps = {\n  onToggle: function onToggle() {},\n  data: {}\n};\nexport default PrintForm;","map":{"version":3,"sources":["D:/actions/st_frontend/src/pages/Order/_S/PrintForm.js"],"names":["N2T","doPrint","React","Component","moment","numeral","ViewModal","PrintForm","state","companyInfo","newProp","JSON","stringify","setState","cart","html","map","item","index","total","parseFloat","price","parseInt","amount","stt","code","name","unit","format","content","images","maxHeight","data","type","HTML","replace","cusInfo","parse","customer_info","address_delivery","phone","email","contact_name","tax_no","orderInfo","code_pi","date_created","date_confirmed","belong_user","payment_code","toUpperCase","TOTAL_VAT","_renderBodyQuotation","_renderBodyOrder","level_discount","total_sum","vat","total_sum_vat","window","USERINFO","username","props","_formatHTML","isOpen","onToggle","padding","el","componentRef","paddingBottom","__html","defaultProps"],"mappings":"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","sourcesContent":["\r\nimport {N2T} from '../../../hook/ultil/N2T'; \r\nimport doPrint from '../../../hook/ultil/doPrint';\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport numeral from 'numeral';\r\n\r\n\r\nimport ViewModal from '../../../components/ViewModal';\r\n\r\n\r\nclass PrintForm extends Component {  \r\n\r\n    \r\n    state = {\r\n        companyInfo:{}\r\n    }\r\n\r\n    componentWillReceiveProps(newProp){\r\n\r\n        if(JSON.stringify(newProp.companyInfo)!='{}'){\r\n\r\n            this.setState(newProp.companyInfo);\r\n\r\n        }\r\n    }\r\n\r\n    _renderBodyOrder(cart){\r\n        let html = ``;\r\n        cart.map((item,index)=>{\r\n            const total = parseFloat(item.price) * parseInt(item.amount);\r\n            const stt = index + 1; \r\n\r\n            html += `\r\n                <tr class=\"record-item\">\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${stt}\r\n                    </td>\r\n                    \r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\" >\r\n                        ${ item.code }\r\n                    </td>\r\n                    <td class=\"item-pro-desc item\" style=\"word-wrap:break-word;\">\r\n                       ${item.name  }\r\n                    </td>\r\n\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ item.unit || '' }\r\n                    </td>\r\n\r\n                    \r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ item.amount }\r\n                    </td>\r\n                    <td class=\"text-center item\"  style=\"vertical-align:middle\">\r\n                        ${ numeral(item.price).format('0,0')  }\r\n                    </td>\r\n\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ numeral(total).format('0,0') }\r\n                    </td>\r\n                </tr>\r\n            `\r\n        });\r\n\r\n        return html;\r\n    }\r\n\r\n    _renderBodyQuotation(cart){\r\n        \r\n        let html = ``;\r\n        cart.map((item,index)=>{\r\n            const total = parseFloat(item.price) * parseInt(item.amount);\r\n            const stt = index + 1; \r\n\r\n            html += `\r\n                <tr class=\"record-item\">\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${stt}\r\n                    </td>\r\n                    \r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\" >\r\n                        ${ item.name }\r\n                    </td>\r\n                    <td class=\"item-pro-desc item\" style=\"word-wrap:break-word;\">\r\n                       ${item.content || ''  }\r\n                    </td>\r\n\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ item.unit || '' }\r\n                    </td>\r\n\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ item.images === null ? '' : <img style={{maxHeight:72}} className=\"img-responsive\" src={ item.images } />  }\r\n                    </td>\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ item.amount }\r\n                    </td>\r\n                    <td class=\"text-center item\"  style=\"vertical-align:middle\">\r\n                        ${ numeral(item.price).format('0,0')  }\r\n                    </td>\r\n\r\n                    <td class=\"text-center item\" style=\"vertical-align:middle\">\r\n                        ${ numeral(total).format('0,0') }\r\n                    </td>\r\n                </tr>\r\n            `\r\n        });\r\n\r\n        return html;\r\n    }\r\n    \r\n\r\n    _formatHTML(data,companyInfo,type){\r\n        let HTML = ``;\r\n\r\n        if(JSON.stringify(companyInfo)!='{}'){\r\n\r\n            type = type === '' ? 'quotation_temp':type;\r\n\r\n            HTML = companyInfo[type];\r\n\r\n\r\n            HTML = HTML.replace(/{{COMPANY_LOGO}}/g,companyInfo['logo']);\r\n            HTML = HTML.replace(/{{COMPANY_NAME}}/g,companyInfo['name']);\r\n            HTML = HTML.replace(/{{COMPANY_ADDRESS}}/g,companyInfo['address']);\r\n            HTML = HTML.replace(/{{COMPANY_TAXNO}}/g,companyInfo['tax_no']);\r\n            HTML = HTML.replace(/{{COMPANY_PHONE}}/g,companyInfo['phone']);\r\n            HTML = HTML.replace(/{{COMPANY_WEBSITE}}/g,companyInfo['website']);\r\n            HTML = HTML.replace(/{{COMPANY_EMAIL}}/g,companyInfo['email']);\r\n\r\n            // DECODE DATA\r\n            if(JSON.stringify(data)!=='{}'){\r\n\r\n\r\n\r\n                const cusInfo = JSON.parse(data.customer_info);\r\n                \r\n                // PARSE CODE CUSTOMER\r\n                HTML = HTML.replace(/{{CUSTOMER_NAME}}/g,cusInfo.name);\r\n                HTML = HTML.replace(/{{CUSTOMER_ADDRESS}}/g,cusInfo.address_delivery);\r\n                HTML = HTML.replace(/{{CUSTOMER_PHONE}}/g,cusInfo.phone);\r\n                HTML = HTML.replace(/{{CUSTOMER_EMAIL}}/g,cusInfo.email);\r\n                HTML = HTML.replace(/{{CUSTOMER_RECEIVER}}/g,cusInfo.contact_name);\r\n                HTML = HTML.replace(/{{CUSTOMER_TAXNO}}/g,cusInfo.tax_no);\r\n                // END PARSE CODE CUSTOMER  \r\n\r\n                const orderInfo = data ; \r\n                // ORDER INFO \r\n                \r\n                HTML = HTML.replace(/{{ORDER_CODE_PI}}/g,orderInfo.code_pi);\r\n                HTML = HTML.replace(/{{ORDER_CODE}}/g,orderInfo.code);\r\n                HTML = HTML.replace(/{{ORDER_CODE_CREATED}}/g, moment(orderInfo.date_created).format('YYYY-MM-DD'));\r\n                HTML = HTML.replace(/{{ORDER_DATE_CONFIRMED}}/g, moment(orderInfo.date_confirmed).format('YYYY-MM-DD'));\r\n\r\n                HTML = HTML.replace(/{{ORDER_BELONG}}/g, orderInfo.belong_user);\r\n                HTML = HTML.replace(/{{ORDER_PAYMENT_CODE}}/g, orderInfo.payment_code);\r\n\r\n                \r\n\r\n                HTML = HTML.replace(/{{BARCODE}}/g, `<img style=\"height:72px\" src=\"https://barcode.tec-it.com/barcode.ashx?data=${ type==='quotation_temp' ? orderInfo.code.toUpperCase() : orderInfo.code_pi.toUpperCase() }\"/>`);\r\n                \r\n                   \r\n                // END ORDER INFO \r\n\r\n                // CART TABLE\r\n                const cart = JSON.parse(orderInfo.cart);  \r\n                const TOTAL_VAT = parseFloat(orderInfo['total_sum']) * ( parseInt(orderInfo['vat'])/100 ) ; \r\n\r\n                HTML = HTML.replace(/{{ORDER_RECORDS}}/g, type === 'quotation_temp' ? this._renderBodyQuotation(cart) : this._renderBodyOrder(cart) ); \r\n                HTML = HTML.replace(/{{ORDER_DISCOUNT}}/g, numeral(orderInfo.level_discount).format('0,0') );\r\n                HTML = HTML.replace(/{{ORDER_AMOUNT}}/g, numeral(orderInfo.total_sum).format('0,0') );\r\n                HTML = HTML.replace(/{{VAT}}/g, orderInfo.vat );\r\n                HTML = HTML.replace(/{{ORDER_AMOUNT}}/g, numeral(orderInfo.total_sum_vat).format('0,0') );\r\n                HTML = HTML.replace(/{{ORDER_AMOUNT_TAX}}/g, numeral(TOTAL_VAT).format('0,0') );\r\n                HTML = HTML.replace(/{{ORDER_SUM}}/g, numeral(orderInfo['total_sum_vat']).format('0,0')+' đ' );\r\n                HTML = HTML.replace(/{{ORDER_SUM_TEXT}}/g, N2T(orderInfo['total_sum_vat'])+' đồng' );\r\n                // END CART TABLE\r\n\r\n                // FOOTER INFO \r\n                HTML = HTML.replace(/{{ORDER_PAYMENT_DESC}}/g, orderInfo['payment_desc'] ); \r\n                HTML = HTML.replace(/{{ORDER_PREPARE}}/g, window.USERINFO.username ); \r\n                \r\n\r\n\r\n                // END FOOTER INFO\r\n                \r\n            }\r\n            \r\n\r\n        }\r\n\r\n        return HTML;\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const data = this.props.data;\r\n        const HTML = this._formatHTML(data,this.props.companyInfo,this.props.type); //this._formatQuotationHTML(data,this.props.companyInfo);\r\n        \r\n        \r\n\r\n        return (\r\n            <ViewModal name={ <span className=\"text-uppercase\"> { data.code } </span> }  { ...this.props }  onToggle={(isOpen)=>{  this.props.onToggle(isOpen)}} >\r\n                <div>\r\n                    \r\n                    <div style={{padding:10}}>\r\n                        <div className=\"btn-group\">\r\n                            <a onClick={()=>{ doPrint(HTML)  }} className=\"btn btn-normal btn-sm\"> <i className=\"fa fa-print\"></i></a>\r\n                        </div>\r\n                          \r\n                    </div>\r\n                    <div    \r\n                        ref={el => (this.componentRef = el)}\r\n                        style={{\r\n                                paddingBottom:20\r\n                        }}\r\n                            dangerouslySetInnerHTML={{ __html: HTML  }} \r\n                    />\r\n\r\n                </div>\r\n            </ViewModal>\r\n        );\r\n    }\r\n}\r\n\r\nPrintForm.defaultProps = {\r\n    onToggle:()=>{},\r\n    data:{}\r\n}  \r\n\r\nexport default PrintForm\r\n"]},"metadata":{},"sourceType":"module"}