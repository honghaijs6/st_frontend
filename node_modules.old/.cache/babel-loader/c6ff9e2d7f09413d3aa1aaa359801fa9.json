{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n// DATABASE\nimport server from '../config/server';\nimport axios from 'axios'; // HOOK\n\nimport { preLoad } from '../hook/before';\n\nvar Model =\n/*#__PURE__*/\nfunction () {\n  function Model(model) {\n    var dispatcher = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Model);\n\n    this.model = model; // string\n\n    this.dispatcher = dispatcher;\n    this.data = [];\n    this.state = {};\n    /*database*/\n\n    this.db = {\n      type: 'GET',\n      url: '',\n      base: server.base() + '/' + this.model + '?',\n      config: '',\n      total: 0\n    };\n    this.paginate = {\n      p: 0,\n      offset: 0,\n      max: 20,\n      is_deleted: 0,\n      key: '',\n      sort_by: 'date_created',\n      sort_type: 'DESC'\n    };\n    this.total = 0;\n    this.setup();\n  }\n\n  _createClass(Model, [{\n    key: \"setup\",\n    value: function setup() {\n      this.jwt = localStorage.getItem('feathers-jwt'); // SETUP MAC DINH\n\n      this.set('method', {\n        name: 'listAll',\n        params: 'all'\n      }); // database\n\n      this.configDB();\n    }\n  }, {\n    key: \"configDB\",\n    value: function configDB() {\n      var _this = this;\n\n      var url = this.db.base + Object.keys(this.paginate).map(function (key) {\n        return key + '=' + _this.paginate[key];\n      }).join('&');\n      /* RECONFIG DB QUERY */\n\n      if (typeof this.db.method !== 'undefined') {\n        var base = this.db.base.replace('?', '');\n        url = base + '/' + this.db.method.name + '/' + this.db.method.params + '?' + Object.keys(this.paginate).map(function (key) {\n          return key + '=' + _this.paginate[key];\n        }).join('&');\n      }\n\n      this.db.url = url;\n      this.db.config = server.setHeader();\n    }\n  }, {\n    key: \"resetConfigDB\",\n    value: function resetConfigDB(name, value) {\n      if (name === 'paginate') {\n        //this.paginate = value ; // value = {}\n        Object.assign(this.paginate, value);\n      } else {\n        this.db[name] = value;\n      }\n\n      this.configDB();\n    }\n    /* WHEN */\n\n    /* start listen to socket server -> save LocalData -> send to reducers\r\n      tren cung 1 may tinh se ko cap nhat socket realtime\r\n    */\n\n    /********WHEN *********** */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      console.log(err);\n      /*const data = err.response.data ;\r\n      const msg = data.errors[0];\r\n      if(typeof msg === 'object'){\r\n        msg = msg.message.indexOf('must be unique') >-1 ? 'Mã này đã được dùng' : msg.message ;\r\n      }\r\n        let el = document.querySelector(\"#form-err\");\r\n      console.log(err);\r\n        if(el !== null){\r\n        el.innerHTML = msg;\r\n        setTimeout(()=>{\r\n          el.innerHTML = 'status';\r\n        },2000)\r\n      }else{  console.log(msg);}*/\n      // end show\n    }\n  }, {\n    key: \"axios\",\n    value: function axios(method) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onSuccess = arguments.length > 2 ? arguments[2] : undefined;\n\n      switch (method) {\n        case 'post':\n          this.post(data, onSuccess);\n          break;\n\n        case 'put':\n          var id = data.id;\n          this.put(id, data, onSuccess);\n          break;\n      }\n    }\n    /* [id1,id2,id3] */\n\n  }, {\n    key: \"deleteMulti\",\n    value: function deleteMulti() {\n      var _this2 = this;\n\n      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (list.length > 0) {\n        var id = list[0].id;\n        this.delete(id, function (res) {\n          if (res.name === 'success' || res.name === 'ok') {\n            var newlist = list.filter(function (item) {\n              return parseInt(item.id) !== parseInt(id);\n            });\n\n            _this2.deleteMulti(newlist);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id, onSuccess) {\n      var _this3 = this;\n\n      this.db.type = 'DELETE';\n      var url = server.base() + '/' + this.model + '/' + id;\n      preLoad('delete');\n      axios.delete(url, this.db.config).then(function (res) {\n        _this3.listenDataChange(res);\n\n        onSuccess(res.data);\n      }, function (error) {\n        _this3.onError(error);\n      });\n    }\n  }, {\n    key: \"post\",\n    value: function post(data, onSuccess) {\n      var _this4 = this;\n\n      this.db.type = 'POST';\n      this.status = data;\n      var url = server.base() + '/' + this.model;\n      preLoad('post');\n      axios.post(url, data, this.db.config).then(function (res) {\n        _this4.listenDataChange(res); // CAP NHAT REDUX STORE\n\n\n        onSuccess(res.data); // callback for auto notification\n      }, function (error) {\n        _this4.onError(error);\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(id, data, onSuccess) {\n      var _this5 = this;\n\n      this.db.type = 'PUT';\n      this.status = data;\n      var url = server.base() + '/' + this.model + '?id=' + id;\n      preLoad('put');\n      axios.put(url, data, this.db.config).then(function (res) {\n        _this5.listenDataChange(res);\n\n        onSuccess(res.data);\n      }, function (error) {\n        _this5.onError(error);\n      });\n    }\n  }, {\n    key: \"putCustom\",\n    value: function putCustom(method, data, onSuccess) {\n      var _this6 = this;\n\n      this.db.type = method === 'cancel' || method === 'delete' || method === 'remove' ? 'DELETE' : 'PUT';\n      this.status = data;\n      var url = server.base() + '/' + this.model + '/' + method;\n      preLoad('put');\n      axios.put(url, data, this.db.config).then(function (res) {\n        _this6.listenDataChange(res);\n\n        onSuccess(res.data);\n      }, function (error) {\n        _this6.onError(error);\n      });\n    }\n  }, {\n    key: \"goto\",\n    value: function goto() {\n      var _this7 = this;\n\n      var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var onSuccess = arguments.length > 1 ? arguments[1] : undefined;\n      var paginate = this.paginate;\n      var offset = 0;\n      offset = parseInt(paginate.max) * p;\n      this.resetConfigDB('paginate', Object.assign(paginate, {\n        offset: offset,\n        p: p\n      }));\n      this.fetch(function (res) {\n        _this7.listenDataChange(res);\n\n        onSuccess(res);\n      }, function (err) {\n        _this7.onError(err);\n      });\n    }\n  }, {\n    key: \"pre\",\n    value: function pre(onSuccess) {\n      var _this8 = this;\n\n      var total = this.db.total;\n      var paginate = this.paginate;\n      var next = paginate.p - 1;\n      var pages = Math.ceil(parseInt(total) / parseInt(paginate.max));\n      next = next < pages ? next : pages - 1;\n      var offset = 0;\n      var page = next;\n      offset = parseInt(paginate.max) * page;\n      this.resetConfigDB('paginate', Object.assign(paginate, {\n        offset: offset,\n        p: page\n      }));\n      this.fetch(function (res) {\n        _this8.listenDataChange(res);\n\n        onSuccess(res);\n      }, function (err) {\n        _this8.onError(err);\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next(onSuccess) {\n      var _this9 = this;\n\n      var total = this.db.total;\n      var paginate = this.paginate;\n      var next = paginate.p + 1;\n      var pages = Math.ceil(parseInt(total) / parseInt(paginate.max));\n      next = next < pages ? next : pages - 1;\n      var offset = 0;\n      var page = next;\n      offset = parseInt(paginate.max) * page;\n      this.resetConfigDB('paginate', Object.assign(paginate, {\n        offset: offset,\n        p: page\n      }));\n      this.fetch(function (res) {\n        _this9.listenDataChange(res);\n\n        onSuccess(res);\n      }, function (err) {\n        _this9.onError(err);\n      });\n    } // initial data : and start socket\n\n  }, {\n    key: \"initData\",\n    value: function () {\n      var _initData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this10 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new Promise(function (resole, reject) {\n                  _this10.fetch(function (res) {\n                    _this10.listenDataChange(res);\n\n                    resole(res);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }() // START LOAD DATA ON THE FIRST TIME\n\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this11 = this;\n\n      this.fetch(function (res) {\n        _this11.listenDataChange(res);\n      });\n    } // auto send to redux store - callback : using on doLoadSubregion Hook\n\n  }, {\n    key: \"get\",\n    value: function get(onSuccess) {\n      var _this12 = this;\n\n      this.fetch(function (res) {\n        _this12.listenDataChange(res); // auto send data to redux store\n\n\n        onSuccess(res.data);\n      });\n    }\n  }, {\n    key: \"doCall\",\n    value: function doCall(url, onSuccess) {\n      var _this13 = this;\n\n      this.db.type = 'GET';\n      var config = this.db.config;\n      url = server.base() + '/' + this.model + url;\n      axios.get(url, config).then(function (res) {\n        //this.restResp(res); // KHÔNG LUU localStorage\n        onSuccess(res);\n      }, function (error) {\n        var status = error.response.status;\n\n        _this13.onError(error);\n      });\n    }\n  }, {\n    key: \"call\",\n    value: function call(url, onSuccess) {\n      var _this14 = this;\n\n      this.db.type = 'GET';\n      var config = this.db.config;\n      axios.get(url, config).then(function (res) {\n        //this.restResp(res); // KHÔNG LUU localStorage\n        onSuccess(res);\n      }, function (error) {\n        var status = error.response.status;\n\n        _this14.onError(error);\n      });\n    }\n  }, {\n    key: \"find\",\n    value: function find(key) {\n      this.set('paginate', {\n        key: key\n      });\n      this.load();\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(onSuccess) {\n      var _this15 = this;\n\n      this.db.type = 'GET';\n      var _this$db = this.db,\n          url = _this$db.url,\n          config = _this$db.config;\n      axios.get(url, config).then(function (res) {\n        //this.restResp(res); // KHÔNG LUU localStorage\n        onSuccess(res);\n      }, function (error) {\n        //var status = error.response.status;\n        _this15.onError(error);\n      });\n    }\n    /*\r\n    listenOnSocketTick(){\r\n        const _this = this ;\r\n      this.socket.clientListenServer((res)=>{\r\n            // CÂP NHẬT REDUX STORE\r\n          let list = store.getState()[this.model].list;\r\n          let idata = res.data ;\r\n            if(res.name==='success'){\r\n            switch(res.type){\r\n                case 'create':\r\n                list.unshift(idata);\r\n                break ;\r\n                case 'update':\r\n                  list.forEach((item,index)=>{\r\n                    if(parseInt(item.id) === parseInt(idata.id)){\r\n                     list[index] = idata;\r\n                  }\r\n                });\r\n                break;\r\n                case 'remove':\r\n                  list = list.filter((item) => {\r\n                  return parseInt(item.id) !== parseInt(res.id)\r\n                });\r\n                break ;\r\n    \r\n            }\r\n              this.socketResp(res,list);\r\n          }\r\n    \r\n        })\r\n    \r\n      }\r\n    */\n\n  }, {\n    key: \"listenDataChange\",\n    value: function listenDataChange(res) {\n      if (res) {\n        preLoad('stop');\n        var idata = res.data; // format data\n\n        var list = this.data; //store.getState()[this.model].list;\n\n        var total = this.db.total;\n\n        if (idata.name === 'success' || idata.name === 'ok') {\n          switch (this.db.type) {\n            case 'CALL':\n              this.restResp({\n                list: []\n              });\n              break;\n\n            case 'GET':\n              // ADD TO REDUX STORE\n              res = res.data;\n              this.data = res.rows;\n              this.resetConfigDB(\"total\", res.count);\n              this.restResp({\n                list: res.rows\n              });\n              break;\n\n            case 'POST':\n              list.unshift(idata.data);\n              this.restResp({\n                list: list\n              });\n              total += 1;\n              this.resetConfigDB(\"total\", total);\n              break;\n\n            case 'PUT':\n              /*UPDATE REDUX STORE*/\n              if (this.dispatcher !== null) {\n                var id = idata.data.id;\n                list.forEach(function (item, index) {\n                  if (parseInt(item.id) === parseInt(id)) {\n                    list[index] = idata.data;\n                  }\n                });\n                this.restResp({\n                  list: list\n                });\n              }\n\n              break;\n\n            case 'DELETE':\n              // UPDATE DELETE ITEM : REDUX STORE\n              list = list.filter(function (item) {\n                return parseInt(item.id) !== parseInt(idata.id);\n              });\n              total -= 1;\n              this.resetConfigDB(\"total\", total);\n              this.restResp({\n                list: list\n              });\n              break;\n          }\n        } else {\n          // SHOW ERROR HERE\n          //let el = document.querySelector(\"#form-err\");\n          //el.innerHTML = '<span class=\"text-danger\">'+idata.message+'</span>';\n          console.log(idata.message);\n        }\n      }\n    }\n    /* END WHEN*/\n\n    /**** HOW ***/\n\n  }, {\n    key: \"restResp\",\n    value: function restResp(res) {\n      // SAU KHI ĐÃ CẬP NHẬT REDUX STORE\n      this.whereStateChange({\n        type: this.db.type + '-' + this.model,\n        list: res.list,\n        res: res.res || {}\n      });\n    }\n    /*socketResp(res,list){\r\n        if(this.jwt !== res.token){\r\n          // SAU KHI ĐÃ CẬP NHẬT REDUX STORE\r\n        this.whereStateChange({\r\n          type:'reset-'+res.model,\r\n          list:list,\r\n          res:res || {}\r\n        })\r\n        }\r\n    }*/\n\n    /**** END HOW *****/\n\n    /******WHERE*******/\n\n  }, {\n    key: \"whereStateChange\",\n    value: function whereStateChange(newState) {\n      Object.assign(this.state, newState);\n      this.data = newState.list;\n\n      if (this.dispatcher !== null) {\n        this.dispatcher(newState);\n      } //store.dispatch(newState);\n\n    }\n    /*********END WHERE*************/\n\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      delete this.paginate[name];\n      this.configDB();\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      this.resetConfigDB(name, value);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(name) {\n      name = name || this.model;\n      return this.data[name];\n    }\n  }]);\n\n  return Model;\n}();\n\nexport default Model;","map":{"version":3,"sources":["D:/actions/st_frontend/src/model/model.js"],"names":["server","axios","preLoad","Model","model","dispatcher","data","state","db","type","url","base","config","total","paginate","p","offset","max","is_deleted","key","sort_by","sort_type","setup","jwt","localStorage","getItem","set","name","params","configDB","Object","keys","map","join","method","replace","setHeader","value","assign","err","console","log","onSuccess","post","id","put","list","length","delete","res","newlist","filter","item","parseInt","deleteMulti","then","listenDataChange","error","onError","status","resetConfigDB","fetch","next","pages","Math","ceil","page","Promise","resole","reject","get","response","load","idata","restResp","rows","count","unshift","forEach","index","message","whereStateChange","newState"],"mappings":"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","sourcesContent":["\r\n// DATABASE\r\nimport server from '../config/server';\r\nimport axios from 'axios';\r\n\r\n// HOOK\r\nimport { preLoad } from '../hook/before';\r\n\r\nclass Model {\r\n\r\n  constructor(model,dispatcher=null){\r\n\r\n    this.model = model; // string\r\n    this.dispatcher = dispatcher ;\r\n\r\n\r\n    this.data = [];\r\n    this.state = {}\r\n\r\n    /*database*/\r\n    this.db = {\r\n      type:'GET',\r\n      url:'',\r\n      base:server.base() + '/'+ this.model+'?',\r\n      config:'',\r\n      total:0\r\n    };\r\n\r\n    this.paginate = {\r\n      p:0,\r\n      offset:0,\r\n      max:20,\r\n      is_deleted:0,\r\n      key:'',\r\n      sort_by:'date_created',\r\n      sort_type:'DESC'\r\n    }\r\n\r\n    this.total = 0\r\n\r\n\r\n    this.setup();\r\n\r\n\r\n  }\r\n\r\n  setup(){\r\n\r\n    this.jwt = localStorage.getItem('feathers-jwt');\r\n    // SETUP MAC DINH\r\n    this.set('method',{\r\n      name:'listAll',\r\n      params:'all'\r\n    });\r\n\r\n    // database\r\n    this.configDB();\r\n\r\n  }\r\n\r\n  configDB(){\r\n\r\n    let  url = this.db.base +   Object.keys(this.paginate).map((key)=>{\r\n        return key +'='+ this.paginate[key]\r\n    }).join('&');\r\n\r\n    /* RECONFIG DB QUERY */\r\n    if(typeof this.db.method !== 'undefined'){\r\n\r\n      const base  = this.db.base.replace('?','');\r\n\r\n      url = base +'/'+ this.db.method.name+'/'+this.db.method.params+'?'+ Object.keys(this.paginate).map((key)=>{\r\n          return key +'='+ this.paginate[key]\r\n      }).join('&');\r\n\r\n    }\r\n\r\n    this.db.url = url;\r\n    this.db.config = server.setHeader();\r\n\r\n\r\n  }\r\n\r\n  resetConfigDB(name,value){\r\n    if(name==='paginate'){\r\n        //this.paginate = value ; // value = {}\r\n        Object.assign(this.paginate,value);\r\n\r\n    }else{\r\n      this.db[name] = value;\r\n\r\n    }\r\n\r\n    this.configDB();\r\n\r\n\r\n  }\r\n\r\n  /* WHEN */\r\n  /* start listen to socket server -> save LocalData -> send to reducers\r\n    tren cung 1 may tinh se ko cap nhat socket realtime\r\n  */\r\n\r\n  /********WHEN *********** */\r\n  onError(err){\r\n\r\n\r\n    console.log(err);\r\n\r\n    /*const data = err.response.data ;\r\n    const msg = data.errors[0];\r\n    if(typeof msg === 'object'){\r\n      msg = msg.message.indexOf('must be unique') >-1 ? 'Mã này đã được dùng' : msg.message ;\r\n    }\r\n\r\n    let el = document.querySelector(\"#form-err\");\r\n    console.log(err);\r\n\r\n    if(el !== null){\r\n      el.innerHTML = msg;\r\n      setTimeout(()=>{\r\n        el.innerHTML = 'status';\r\n      },2000)\r\n    }else{  console.log(msg);}*/\r\n\r\n    // end show\r\n  }\r\n\r\n\r\n  axios(method,data={},onSuccess){\r\n\r\n    switch (method) {\r\n      case 'post':\r\n          this.post(data,onSuccess);\r\n      break;\r\n      case 'put':\r\n\r\n          const id = data.id;\r\n          this.put(id,data,onSuccess);\r\n      break;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /* [id1,id2,id3] */\r\n  deleteMulti(list=[]){\r\n\r\n\r\n\r\n    if(list.length>0){\r\n\r\n      const id = list[0].id;\r\n      this.delete(id,(res)=>{\r\n        if(res.name==='success' || res.name ==='ok' ){\r\n          let newlist = list.filter((item) => { return parseInt(item.id) !== parseInt(id) })\r\n          this.deleteMulti(newlist);\r\n        }\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  delete(id,onSuccess){\r\n\r\n    this.db.type = 'DELETE';\r\n    const url = server.base() + '/' + this.model+'/'+id ;\r\n\r\n    preLoad('delete');\r\n\r\n\r\n    axios.delete(url,this.db.config)\r\n          .then((res)=>{\r\n            this.listenDataChange(res);\r\n            onSuccess(res.data);\r\n          },(error)=>{\r\n            this.onError(error)\r\n\r\n      })\r\n\r\n  }\r\n\r\n  post(data,onSuccess){\r\n\r\n    this.db.type = 'POST';\r\n    this.status = data ;\r\n\r\n    const url = server.base()+ '/' + this.model;\r\n\r\n    preLoad('post');\r\n    axios.post(url,data,this.db.config)\r\n          .then((res)=>{\r\n\r\n            this.listenDataChange(res) // CAP NHAT REDUX STORE\r\n            onSuccess(res.data) // callback for auto notification\r\n\r\n\r\n          },(error)=>{\r\n\r\n          this.onError(error);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  put(id,data,onSuccess){\r\n\r\n    this.db.type = 'PUT';\r\n    this.status = data ;\r\n\r\n    const url = server.base() + '/' + this.model + '?id='+id;\r\n\r\n    preLoad('put');\r\n\r\n\r\n    axios.put(url,data,this.db.config)\r\n          .then((res)=>{\r\n            this.listenDataChange(res);\r\n            onSuccess(res.data)\r\n          },(error)=>{\r\n\r\n            this.onError(error)\r\n\r\n    })\r\n\r\n  }\r\n\r\n  putCustom(method,data,onSuccess){\r\n\r\n    this.db.type = method === 'cancel' || method ==='delete' || method ==='remove' ? 'DELETE' :  'PUT';\r\n    this.status = data ;\r\n\r\n    const url = server.base() + '/' + this.model + '/'+method;\r\n\r\n    preLoad('put');\r\n\r\n\r\n    axios.put(url,data,this.db.config)\r\n          .then((res)=>{\r\n            this.listenDataChange(res);\r\n            onSuccess(res.data)\r\n          },(error)=>{\r\n\r\n            this.onError(error)\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  goto(p=0,onSuccess){\r\n\r\n    const paginate  = this.paginate ;\r\n\r\n    let offset = 0 ;\r\n    offset = parseInt(paginate.max) * (p);\r\n\r\n    this.resetConfigDB('paginate',Object.assign(paginate,{\r\n      offset:offset,\r\n      p:p\r\n    }));\r\n\r\n    this.fetch((res)=>{\r\n\r\n      this.listenDataChange(res);\r\n      onSuccess(res);\r\n    },(err)=>{\r\n\r\n      this.onError(err);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  pre(onSuccess){\r\n\r\n    const { total } = this.db ;\r\n    const paginate = this.paginate ;\r\n\r\n    let next = paginate.p - 1;\r\n\r\n    let pages = Math.ceil( parseInt(total) / parseInt(paginate.max));\r\n    next = next < pages ? next : pages - 1 ;\r\n\r\n    let offset = 0 ;\r\n    let page = next ;\r\n\r\n    offset = parseInt(paginate.max) * (page);\r\n\r\n    this.resetConfigDB('paginate',Object.assign(paginate,{\r\n      offset:offset,\r\n      p:page\r\n    }));\r\n\r\n\r\n    this.fetch((res)=>{\r\n      this.listenDataChange(res);\r\n      onSuccess(res);\r\n    },(err)=>{\r\n      this.onError(err);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  next(onSuccess){\r\n\r\n    const { total } = this.db ;\r\n    const paginate = this.paginate;\r\n    let next = paginate.p + 1;\r\n\r\n    let pages = Math.ceil( parseInt(total) / parseInt(paginate.max));\r\n    next = next < pages ? next : pages - 1 ;\r\n\r\n    let offset = 0 ;\r\n    let page = next ;\r\n\r\n    offset = parseInt(paginate.max) * (page);\r\n\r\n    this.resetConfigDB('paginate',Object.assign(paginate,{\r\n      offset:offset,\r\n      p:page\r\n    }));\r\n\r\n\r\n    this.fetch((res)=>{\r\n      this.listenDataChange(res);\r\n      onSuccess(res);\r\n    },(err)=>{\r\n      this.onError(err);\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  // initial data : and start socket\r\n  async initData(){\r\n\r\n    return new Promise((resole,reject)=>{\r\n      this.fetch((res)=>{\r\n        this.listenDataChange(res);\r\n\r\n        resole(res);\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  // START LOAD DATA ON THE FIRST TIME\r\n  load(){\r\n\r\n    this.fetch((res)=>{\r\n      this.listenDataChange(res);\r\n    });\r\n\r\n  }\r\n\r\n  // auto send to redux store - callback : using on doLoadSubregion Hook\r\n  get(onSuccess){\r\n\r\n      this.fetch((res)=>{\r\n        this.listenDataChange(res); // auto send data to redux store\r\n        onSuccess(res.data)\r\n      })\r\n\r\n\r\n  }\r\n\r\n  doCall(url,onSuccess){\r\n\r\n    this.db.type = 'GET';\r\n    const {config} = this.db ;\r\n\r\n    url = server.base()+'/'+this.model+url;\r\n\r\n\r\n\r\n\r\n    axios.get(url,config)\r\n          .then((res) => {\r\n            //this.restResp(res); // KHÔNG LUU localStorage\r\n            onSuccess(res)\r\n\r\n          },\r\n          (error) => {\r\n              var status = error.response.status;\r\n              this.onError(error)\r\n\r\n            }\r\n          );\r\n\r\n  }\r\n\r\n  call(url,onSuccess){\r\n\r\n    this.db.type = 'GET';\r\n    const {config} = this.db ;\r\n\r\n    axios.get(url,config)\r\n          .then((res) => {\r\n            //this.restResp(res); // KHÔNG LUU localStorage\r\n            onSuccess(res)\r\n\r\n          },\r\n          (error) => {\r\n              var status = error.response.status;\r\n              this.onError(error)\r\n\r\n            }\r\n          );\r\n  }\r\n\r\n  find(key){\r\n\r\n    this.set('paginate',{\r\n      key:key\r\n    });\r\n\r\n    this.load();\r\n\r\n  }\r\n\r\n  fetch(onSuccess){\r\n\r\n    this.db.type = 'GET';\r\n    const {url, config} = this.db ;\r\n\r\n\r\n\r\n    axios.get(url,config)\r\n            .then((res) => {\r\n              //this.restResp(res); // KHÔNG LUU localStorage\r\n              onSuccess(res);\r\n\r\n            },\r\n            (error) => {\r\n                //var status = error.response.status;\r\n                this.onError(error)\r\n\r\n              }\r\n    );\r\n  }\r\n\r\n  /*\r\n  listenOnSocketTick(){\r\n\r\n    const _this = this ;\r\n    this.socket.clientListenServer((res)=>{\r\n\r\n        // CÂP NHẬT REDUX STORE\r\n        let list = store.getState()[this.model].list;\r\n        let idata = res.data ;\r\n\r\n        if(res.name==='success'){\r\n          switch(res.type){\r\n\r\n            case 'create':\r\n              list.unshift(idata);\r\n\r\n            break ;\r\n\r\n            case 'update':\r\n\r\n              list.forEach((item,index)=>{\r\n\r\n                if(parseInt(item.id) === parseInt(idata.id)){\r\n                   list[index] = idata;\r\n                }\r\n              });\r\n\r\n            break;\r\n\r\n            case 'remove':\r\n\r\n              list = list.filter((item) => {\r\n                return parseInt(item.id) !== parseInt(res.id)\r\n              });\r\n\r\n            break ;\r\n\r\n\r\n          }\r\n\r\n          this.socketResp(res,list);\r\n        }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n  }\r\n  */\r\n\r\n  listenDataChange(res){\r\n\r\n    if(res){\r\n\r\n      preLoad('stop');\r\n\r\n      let idata = res.data ; // format data\r\n      let list = this.data ;  //store.getState()[this.model].list;\r\n      let { total } =  this.db;\r\n\r\n\r\n      if(idata.name==='success' || idata.name==='ok'){\r\n        switch (this.db.type) {\r\n\r\n          case 'CALL':\r\n\r\n            this.restResp({\r\n              list:[]\r\n            });\r\n\r\n\r\n          break ;\r\n          case 'GET':\r\n\r\n            // ADD TO REDUX STORE\r\n            res = res.data ;\r\n            this.data = res.rows ;\r\n\r\n\r\n\r\n            this.resetConfigDB(\"total\",res.count);\r\n\r\n            this.restResp({\r\n              list:res.rows\r\n            });\r\n\r\n\r\n          break;\r\n\r\n          case 'POST':\r\n\r\n            list.unshift(idata.data);\r\n            this.restResp({\r\n              list:list\r\n            });\r\n\r\n\r\n            total += 1;\r\n            this.resetConfigDB(\"total\",total);\r\n\r\n\r\n          break ;\r\n\r\n          case 'PUT':\r\n\r\n            /*UPDATE REDUX STORE*/\r\n\r\n            if(this.dispatcher !== null){\r\n              const id = idata.data.id;\r\n              list.forEach((item,index)=>{\r\n\r\n                if(parseInt(item.id) === parseInt(id)){\r\n                  list[index] = idata.data;\r\n                }\r\n              })\r\n\r\n              this.restResp({\r\n                list:list\r\n              });\r\n            }\r\n\r\n\r\n\r\n          break ;\r\n\r\n          case 'DELETE':\r\n\r\n            // UPDATE DELETE ITEM : REDUX STORE\r\n\r\n            list = list.filter((item) => {\r\n              return parseInt(item.id) !== parseInt(idata.id)  ;\r\n            });\r\n\r\n            total -= 1;\r\n            this.resetConfigDB(\"total\",total);\r\n\r\n            this.restResp({\r\n              list:list\r\n            });\r\n          break ;\r\n\r\n\r\n        }\r\n\r\n      }else{\r\n\r\n        // SHOW ERROR HERE\r\n        //let el = document.querySelector(\"#form-err\");\r\n        //el.innerHTML = '<span class=\"text-danger\">'+idata.message+'</span>';\r\n        console.log(idata.message);\r\n\r\n\r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n  /* END WHEN*/\r\n\r\n  /**** HOW ***/\r\n  restResp(res){\r\n\r\n    // SAU KHI ĐÃ CẬP NHẬT REDUX STORE\r\n\r\n    this.whereStateChange({\r\n      type:this.db.type+'-'+this.model,\r\n      list:res.list,\r\n      res:res.res || {}\r\n    })\r\n\r\n  }\r\n  /*socketResp(res,list){\r\n\r\n    if(this.jwt !== res.token){\r\n\r\n      // SAU KHI ĐÃ CẬP NHẬT REDUX STORE\r\n      this.whereStateChange({\r\n        type:'reset-'+res.model,\r\n        list:list,\r\n        res:res || {}\r\n      })\r\n\r\n    }\r\n  }*/\r\n  /**** END HOW *****/\r\n\r\n  /******WHERE*******/\r\n  whereStateChange(newState){\r\n\r\n\r\n    Object.assign(this.state,newState);\r\n\r\n    this.data = newState.list;\r\n\r\n\r\n    if(this.dispatcher!==null){\r\n      this.dispatcher(newState);\r\n    }\r\n\r\n    //store.dispatch(newState);\r\n\r\n\r\n  }\r\n  /*********END WHERE*************/\r\n\r\n  remove(name){\r\n\r\n    delete this.paginate[name] ;\r\n    this.configDB();\r\n  }\r\n  set(name,value){\r\n    this.resetConfigDB(name,value);\r\n  }\r\n\r\n\r\n  getData(name){\r\n    name = name || this.model;\r\n    return this.data[name];\r\n  }\r\n\r\n}\r\n\r\nexport default Model\r\n"]},"metadata":{},"sourceType":"module"}