{"ast":null,"code":"import _classCallCheck from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\actions\\\\st_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\actions\\\\st_frontend\\\\src\\\\components\\\\BenMessage\\\\Modal.js\";\nimport React, { Component } from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nvar MessageModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MessageModal, _Component);\n\n  function MessageModal(props) {\n    var _this;\n\n    _classCallCheck(this, MessageModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessageModal).call(this, props));\n    _this.state = {\n      modalOpen: true\n    };\n    return _this;\n  }\n\n  _createClass(MessageModal, [{\n    key: \"toggle\",\n    value: function toggle() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.setState({\n        modalOpen: !this.state.modalOpen\n      });\n\n      if (typeof this.props.onClose === 'function') {\n        this.props.onClose(result);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          message = _this$props.message,\n          title = _this$props.title,\n          confirmText = _this$props.confirmText,\n          cancelText = _this$props.cancelText,\n          confirmColor = _this$props.confirmColor,\n          cancelColor = _this$props.cancelColor,\n          className = _this$props.className;\n      var modalHeader = null;\n      var cancelButton = null;\n\n      if (title) {\n        modalHeader = React.createElement(ModalHeader, {\n          toggle: function toggle() {\n            _this2.toggle(false);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, title);\n      }\n\n      return React.createElement(Modal, {\n        isOpen: this.state.modalOpen,\n        toggle: function toggle() {\n          _this2.toggle(false);\n        },\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, modalHeader, React.createElement(ModalBody, {\n        style: {\n          textAlign: 'center',\n          fontFamily: 'Roboto',\n          padding: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, message));\n    }\n  }]);\n\n  return MessageModal;\n}(Component);\n\nexport { MessageModal as default };","map":{"version":3,"sources":["D:/actions/st_frontend/src/components/BenMessage/Modal.js"],"names":["React","Component","Modal","ModalHeader","ModalBody","ModalFooter","Button","MessageModal","props","state","modalOpen","result","setState","onClose","message","title","confirmText","cancelText","confirmColor","cancelColor","className","modalHeader","cancelButton","toggle","textAlign","fontFamily","padding"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,WAAxC,EAAqDC,MAArD,QAAmE,YAAnE;;IAEqBC,Y;;;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAHe;AAQlB;;;;6BAEqB;AAAA,UAAfC,MAAe,uEAAN,IAAM;AAClB,WAAKC,QAAL,CAAc;AACVF,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADb,OAAd;;AAIA,UAAI,OAAO,KAAKF,KAAL,CAAWK,OAAlB,KAA8B,UAAlC,EAA8C;AAC1C,aAAKL,KAAL,CAAWK,OAAX,CAAmBF,MAAnB;AACH;AACJ;;;6BAGQ;AAAA;;AAAA,wBASD,KAAKH,KATJ;AAAA,UAEDM,OAFC,eAEDA,OAFC;AAAA,UAGDC,KAHC,eAGDA,KAHC;AAAA,UAIDC,WAJC,eAIDA,WAJC;AAAA,UAKDC,UALC,eAKDA,UALC;AAAA,UAMDC,YANC,eAMDA,YANC;AAAA,UAODC,WAPC,eAODA,WAPC;AAAA,UAQDC,SARC,eAQDA,SARC;AAWL,UAAIC,WAAW,GAAG,IAAlB;AACA,UAAIC,YAAY,GAAG,IAAnB;;AAEA,UAAIP,KAAJ,EAAW;AACPM,QAAAA,WAAW,GACP,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAE,kBAAM;AACvB,YAAA,MAAI,CAACE,MAAL,CAAY,KAAZ;AACH,WAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEIR,KAFJ,CADJ;AAKH;;AAID,aACI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKN,KAAL,CAAWC,SAA1B;AAAqC,QAAA,MAAM,EAAE,kBAAM;AAC/C,UAAA,MAAI,CAACa,MAAL,CAAY,KAAZ;AACH,SAFD;AAEG,QAAA,SAAS,EAAEH,SAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGKC,WAHL,EAII,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACG,UAAAA,SAAS,EAAC,QAAX;AAAoBC,UAAAA,UAAU,EAAC,QAA/B;AAAwCC,UAAAA,OAAO,EAAC;AAAhD,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwEZ,OAAxE,CAJJ,CADJ;AAQH;;;;EAtDqCb,S;;SAArBM,Y","sourcesContent":["import React, { Component } from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nexport default class MessageModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            modalOpen: true\r\n        };\r\n\r\n        \r\n    }\r\n\r\n    toggle(result = true) {\r\n        this.setState({\r\n            modalOpen: !this.state.modalOpen\r\n        });\r\n\r\n        if (typeof this.props.onClose === 'function') {\r\n            this.props.onClose(result);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            message,\r\n            title,\r\n            confirmText,\r\n            cancelText,\r\n            confirmColor,\r\n            cancelColor,\r\n            className\r\n        } = this.props;\r\n\r\n        let modalHeader = null;\r\n        let cancelButton = null;\r\n\r\n        if (title) {\r\n            modalHeader = (\r\n                <ModalHeader toggle={() => {\r\n                    this.toggle(false);\r\n                }}>{title}</ModalHeader>\r\n            );\r\n        }\r\n\r\n       \r\n\r\n        return (\r\n            <Modal isOpen={this.state.modalOpen} toggle={() => {\r\n                this.toggle(false);\r\n            }} className={className}>\r\n                {modalHeader}\r\n                <ModalBody style={{textAlign:'center',fontFamily:'Roboto',padding:20}}>{message}</ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}